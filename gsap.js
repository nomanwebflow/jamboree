document.addEventListener("DOMContentLoaded", (() => { void 0 === window.gsap && document.documentElement.classList.add("gsap-not-found"), gsap.registerPlugin(ScrollTrigger, SplitText) })), $("[data-btn='wrap']").each((function () { const t = $(this).find("[data-btn='clip']").attr("aria-hidden", "true"), e = "power2.out"; function a(t, e) { let a = t.offset().top - $(window).scrollTop(); return (e.pageY - $(window).scrollTop() - a) / t.innerHeight() * 100 } function r(t, e) { let a = t.offset().left; return (e.pageX - a) / t.innerWidth() * 100 } $(this).on("mouseenter", (function (s) { let o = a($(this), s), i = r($(this), s); gsap.set(t, { display: "flex" }), gsap.fromTo(t, { clipPath: `circle(0% at ${i}% ${o}%)` }, { clipPath: `circle(141.4% at ${i}% ${o}%)`, duration: .4, ease: e }) })), $(this).on("mouseleave", (function (s) { let o = a($(this), s), i = r($(this), s); gsap.to(t, { clipPath: `circle(0% at ${i}% ${o}%)`, overwrite: !0, duration: .4, ease: e }) })) })), document.addEventListener("DOMContentLoaded", (() => { gsap.registerPlugin(CustomEase), CustomEase.create("main", "0.65, 0.01, 0.05, 0.99"), gsap.defaults({ ease: "main", duration: .7 }), function () { const t = document.querySelector(".nav"); if (!t) return void console.warn("⚠️ .nav element not found — menu not initialized"); const e = t.querySelector(".overlay"), a = t.querySelector(".menu"), r = t.querySelectorAll(".bg-panel"), s = document.querySelectorAll("[data-menu-toggle]"), o = t.querySelectorAll(".menu .nav_link"), i = t.querySelectorAll("[data-menu-fade]"), n = document.querySelector(".menu-button"), c = n ? n.querySelectorAll("p") : [], l = n ? n.querySelector(".menu-button-icon") : null, d = gsap.timeline(), u = () => { t.setAttribute("data-nav", "closed"), n?.classList.remove("is-opened"), n?.setAttribute("aria-label", "Open menu"), d.clear().to(e, { autoAlpha: 0 }).to(a, { xPercent: 120 }, "<").to(c, { yPercent: 0 }, "<").to(l, { rotate: 0 }, "<").set(t, { display: "none" }) }; s.forEach((s => { s.addEventListener("click", (() => { "open" === t.getAttribute("data-nav") ? u() : (t.setAttribute("data-nav", "open"), n?.classList.add("is-opened"), n?.setAttribute("aria-label", "Close menu"), d.clear().set(t, { display: "block" }).set(a, { xPercent: 0 }, "<").fromTo(c, { yPercent: 0 }, { yPercent: -100, stagger: .2 }).fromTo(l, { rotate: 0 }, { rotate: 315 }, "<").fromTo(e, { autoAlpha: 0 }, { autoAlpha: 1 }, "<").fromTo(r, { xPercent: 101 }, { xPercent: 0, stagger: .12, duration: .575 }, "<").fromTo(o, { yPercent: 140, rotate: 10, autoAlpha: 0 }, { yPercent: 0, autoAlpha: 1, rotate: 0, stagger: .05 }, "<+=0.35").fromTo(i, { autoAlpha: 0, yPercent: 50 }, { autoAlpha: 1, yPercent: 0, stagger: .04 }, "<+=0.2")) })) })), document.addEventListener("keydown", (e => { "Escape" === e.key && "open" === t.getAttribute("data-nav") && u() })), n && !n.hasAttribute("aria-label") && n.setAttribute("aria-label", "Open menu") }() })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="hero-main"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 70%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelector(".hero_main_content"); r && a.from(r, { opacity: 0, yPercent: 50, scale: .85, duration: .7 }, e); const s = t.querySelector(".c-heading > *"); if (s) { const t = SplitText.create(s, { type: "chars, lines, words", mask: "chars" }); t.chars.forEach((t => t.classList.add("split-char"))), t.words.forEach((t => t.classList.add("split-word"))), t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.chars, { opacity: 0, yPercent: 100, duration: .5, stagger: { amount: .3, from: "start" } }, .68 + e) } const o = t.querySelector('[data-animate="true"] p'); if (o) { const t = SplitText.create(o, { type: "lines", mask: "lines" }); t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.lines, { opacity: 0, yPercent: 100, duration: .45, stagger: .15 }, 1 + e) } const i = t.querySelectorAll(".u-button-group > * > *"); i.length && a.from(i, { opacity: 0, yPercent: 100, stagger: .15 }, 1.25 + e); const n = t.querySelector(".hero_main_visual"); n && a.from(n, { opacity: 0, yPercent: 50, duration: .7, scale: .85 }, 1.4 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="stacked-content"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 70%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelector(".tag_wrap"); r && a.from(r, { opacity: 0, yPercent: 100, duration: .7 }, e); const s = t.querySelector(".c-heading > *"); if (s) { const t = SplitText.create(s, { type: "chars, lines, words", mask: "chars" }); t.chars.forEach((t => t.classList.add("split-char"))), t.words.forEach((t => t.classList.add("split-word"))), t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.chars, { opacity: 0, yPercent: 100, duration: .5, stagger: { amount: .3, from: "start" } }, .3 + e) } const o = t.querySelectorAll('[data-animate="true"] p'); if (o) { const t = SplitText.create(o, { type: "lines", mask: "lines" }); t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.lines, { opacity: 0, yPercent: 100, duration: .75, stagger: .05 }, .4 + e) } const i = t.querySelectorAll(".u-button-group > * > *"); i.length && a.from(i, { opacity: 0, yPercent: 100, stagger: .15 }, .9 + e); const n = t.querySelectorAll(".card_primary_wrap, .card_img-bottom_outer"); n.length && a.from(n, { opacity: 0, yPercent: 30, stagger: .15 }, .65 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="image-split"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 70%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelector(".c-heading > *"); if (r) { const t = SplitText.create(r, { type: "chars, lines, words", mask: "chars" }); t.chars.forEach((t => t.classList.add("split-char"))), t.words.forEach((t => t.classList.add("split-word"))), t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.chars, { opacity: 0, yPercent: 100, duration: .5, stagger: { amount: .3, from: "start" } }, e) } const s = t.querySelectorAll('[data-animate="true"] > *:not(ul, ol)'); if (s) { const t = SplitText.create(s, { type: "lines", mask: "lines" }); t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.lines, { opacity: 0, yPercent: 100, duration: .75, stagger: .05 }, .4 + e) } const o = t.querySelectorAll(".c-text > ul > li, .c-text > ol > li"); o.length && a.from(o, { opacity: 0, yPercent: 100, duration: .75, stagger: .05 }, .4 + e); const i = t.querySelectorAll(".u-button-group > * > *"); i.length && a.from(i, { opacity: 0, yPercent: 100, stagger: .15 }, .6 + e); const n = t.querySelector(".c-image-wrap"); n && a.from(n, { opacity: 0, yPercent: 50, duration: .7, scale: .85 }, .15 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="icons-grid"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 70%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelector(".c-heading > *"); if (r) { const t = SplitText.create(r, { type: "chars, lines, words", mask: "chars" }); t.chars.forEach((t => t.classList.add("split-char"))), t.words.forEach((t => t.classList.add("split-word"))), t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.chars, { opacity: 0, yPercent: 100, duration: .5, stagger: { amount: .3, from: "start" } }, e) } const s = t.querySelectorAll('[data-animate="true"] p'); if (s) { const t = SplitText.create(s, { type: "lines", mask: "lines" }); t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.lines, { opacity: 0, yPercent: 100, duration: .45, stagger: .15 }, .6 + e) } const o = t.querySelectorAll(".u-button-group > * > *"); o.length && a.from(o, { opacity: 0, yPercent: 100, stagger: .15 }, .3 + e); const i = t.querySelectorAll(".card_primary_wrap"); i.length && a.from(i, { opacity: 0, yPercent: 40, duration: .7, stagger: .05 }, .4 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="cta"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 70%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelector(".c-image-wrap"); r && a.from(r, { opacity: 0, yPercent: 50, scale: .85, duration: .7 }, e); const s = t.querySelector(".c-heading > *"); if (s) { const t = SplitText.create(s, { type: "chars, lines, words", mask: "chars" }); t.chars.forEach((t => t.classList.add("split-char"))), t.words.forEach((t => t.classList.add("split-word"))), t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.chars, { opacity: 0, yPercent: 100, duration: .5, stagger: { amount: .3, from: "start" } }, .5 + e) } const o = t.querySelectorAll('[data-animate="true"] p'); if (o) { const t = SplitText.create(o, { type: "lines", mask: "lines" }); t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.lines, { opacity: 0, yPercent: 100, duration: .45, stagger: .15 }, .6 + e) } const i = t.querySelectorAll(".u-button-group > * > *"); i.length && a.from(i, { opacity: 0, yPercent: 100, stagger: .15 }, .7 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="footer"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 80%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelector(".footer_logo_wrap"); r && a.from(r, { opacity: 0, yPercent: 100, duration: .4 }, e); const s = t.querySelector('[data-animate="true"] p'); if (s) { const t = SplitText.create(s, { type: "lines", mask: "lines" }); t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.lines, { opacity: 0, yPercent: 100, duration: .45, stagger: .15 }, .3 + e) } const o = t.querySelectorAll(".footer_nav > *"); o.length && a.from(o, { opacity: 0, yPercent: 100, stagger: .15, duration: .7 }, .5 + e); const i = t.querySelectorAll(".footer_logo > *"); i.length && a.from(i, { opacity: 0, yPercent: 100, stagger: .05, ease: "elastic.inOut(1,0.4)", duration: 1.5 }, .16 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="download"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 80%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelector(".download_main_logo"); r && a.from(r, { opacity: 0, yPercent: 100, duration: .4 }, e); const s = t.querySelector(".c-heading > *"); if (s) { const t = SplitText.create(s, { type: "chars, lines, words", mask: "chars" }); t.chars.forEach((t => t.classList.add("split-char"))), t.words.forEach((t => t.classList.add("split-word"))), t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.chars, { opacity: 0, yPercent: 100, duration: .5, stagger: { amount: .3, from: "start" } }, .3 + e) } const o = t.querySelectorAll('[data-animate="true"] p'); if (o) { const t = SplitText.create(o, { type: "lines", mask: "lines" }); t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.lines, { opacity: 0, yPercent: 100, duration: .45, stagger: .15 }, .5 + e) } const i = t.querySelectorAll(".download_main_button_wrap > *, .u-button-group > * > *"); i.length && a.from(i, { opacity: 0, yPercent: 20, stagger: .15 }, .7 + e); const n = t.querySelector(".c-image-cs-wrap"); n && a.from(n, { opacity: 0, yPercent: 50, duration: .7, scale: .85 }, .15 + e); const c = t.querySelector(".download_main_play-icon"); c && a.from(c, { opacity: 0, yPercent: 50, duration: .7, scale: .85 }, .65 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="hero-banner"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 80%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelector(".hero_banner_contain"); r && a.from(r, { opacity: 0, yPercent: 50, scale: .85, duration: .7 }, e); const s = t.querySelector(".c-heading > *"); if (s) { const t = SplitText.create(s, { type: "chars, lines, words", mask: "chars" }); t.chars.forEach((t => t.classList.add("split-char"))), t.words.forEach((t => t.classList.add("split-word"))), t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.chars, { opacity: 0, yPercent: 100, duration: .5, stagger: { amount: .3, from: "start" } }, .7 + e) } const o = t.querySelectorAll('[data-animate="true"] p'); if (o) { const t = SplitText.create(o, { type: "lines", mask: "lines" }); t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.lines, { opacity: 0, yPercent: 100, duration: .45, stagger: .15 }, .9 + e) } const i = t.querySelectorAll(".u-button-group > * > *"); i.length && a.from(i, { opacity: 0, yPercent: 100, stagger: .15 }, .95 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="landingpage-hero"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 70%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelector(".c-heading > *"); if (r) { const t = SplitText.create(r, { type: "chars, lines, words", mask: "chars" }); t.chars.forEach((t => t.classList.add("split-char"))), t.words.forEach((t => t.classList.add("split-word"))), t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.chars, { opacity: 0, yPercent: 100, duration: .5, stagger: { amount: .3, from: "start" } }, .68 + e) } const s = t.querySelector('[data-animate="true"] p'); if (s) { const t = SplitText.create(s, { type: "lines", mask: "lines" }); t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.lines, { opacity: 0, yPercent: 100, duration: .45, stagger: .15 }, 1 + e) } const o = t.querySelectorAll(".u-button-group > * > *"); o.length && a.from(o, { opacity: 0, yPercent: 100, stagger: .15 }, 1.25 + e); const i = t.querySelector(".c-image-wrap"); i && a.from(i, { opacity: 0, yPercent: 50, duration: .7, scale: .85 }, 1.4 + e); const n = t.querySelectorAll(".hero_lp_svg"); n.length && a.from(n, { opacity: 0, yPercent: 100, stagger: .15 }, 1.6 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="tabs"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 70%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelector(".tab_left .c-heading > *"); if (r) { const t = SplitText.create(r, { type: "chars, lines, words", mask: "chars" }); t.chars.forEach((t => t.classList.add("split-char"))), t.words.forEach((t => t.classList.add("split-word"))), t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.chars, { opacity: 0, yPercent: 100, duration: .5, stagger: { amount: .3, from: "start" } }, e) } const s = t.querySelectorAll(".tab_button_item"); s && a.from(s, { opacity: 0, yPercent: 100, stagger: .05, duration: .7 }, .3 + e); const o = t.querySelectorAll('.tab_left [data-animate="true"] p'); if (o) { const t = SplitText.create(o, { type: "lines", mask: "lines" }); t.lines.forEach((t => t.classList.add("split-line"))), t.masks.forEach((t => t.classList.add("split-mask"))), a.from(t.lines, { opacity: 0, yPercent: 100, duration: .75, stagger: .05 }, .4 + e) } const i = t.querySelectorAll(".u-button-group > * > *"); i.length && a.from(i, { opacity: 0, yPercent: 100, stagger: .15 }, .9 + e); const n = t.querySelectorAll(".card_primary_wrap, .card_img-bottom_outer"); n.length && a.from(n, { opacity: 0, yPercent: 30, stagger: .15 }, .65 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="featured-testimonials"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 70%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelectorAll(".card_primary_wrap"); r.length && a.from(r, { opacity: 0, yPercent: 100, stagger: .15 }, e); const s = t.querySelector(".c-image-wrap"); s && a.from(s, { opacity: 0, yPercent: 50, duration: .7, scale: .85 }, .15 + e) })) })) })), document.addEventListener("DOMContentLoaded", (() => { document.fonts.ready.then((() => { const t = document.querySelectorAll('[data-animation-trigger="faq"]'); t.length && t.forEach((t => { t.style.visibility = "visible"; const e = parseFloat(t.getAttribute("data-animation-delay")) || 0, a = gsap.timeline({ scrollTrigger: { trigger: t, start: "top 70%", once: !0 }, defaults: { ease: "back.inOut" } }), r = t.querySelectorAll(".accordion_list > *"); r.length && a.from(r, { opacity: 0, yPercent: 100, stagger: .15 }, e) })) })) }));
